; **************************************************************************************************
; **************************************************************************************************
;  THIS WILL NOT RUN ON REAL HARDWARE OR EVEN THE EMULATOR, PURELY FOR TESTING!
; **************************************************************************************************
; **************************************************************************************************

; test of the native code assembler


_disableUpload_     EQU     0           ; disables all writes to RAM/ROM, used for testing and verification


ROM     EQU     0x0000


ROM                 .ld     $00         
                    .ld     $80,out
                    .ld     $c0,out
                    .ld     $01         
countMem0           .st     [$01],y
                    .ld     $ff
                    .xora   [y,$00]
                    .st     [y,$00]
                    .st     [$00]
                    .xora   [y,$00]
loopMem0            .bne    loopMem0
                    .ld     $ff
                    .xora   [y,$00]
                    .st     [y,$00]
                    .xora   [$00]
                    .beq    countMem1
                    .ld     [$01]
                    .bra    countMem0
                    .adda   ac
countMem1           .ld     $ff         
debounce            .st     [$00]
                    .bne    debounce + 1
                    .suba   $01
                    .ld     [$00]
                    .bne    debounce
                    .suba   $01
                    .ld     $01         
                    .ld     $80,out
                    .ld     $c0,out
                    .ld     $00         
                    .st     [$18],x
                    .st     [$19],y
initEnt0            .ld     [$06]
                    .bge    initEnt1
                    .adda   [y,x]
                    .xora   $bf
initEnt1            .st     [$06]
                    .ld     [$07]
                    .bge    initEnt2
                    .adda   [$06]
                    .xora   $c1
initEnt2            .st     [$07]
                    .adda   [$08]
                    .st     [$08]
                    .ld     [$18]
                    .adda   $01
                    .bne    initEnt0
                    .st     [$18],x
                    .ld     [$19]
                    .adda   $01
                    .bne    initEnt0
                    .st     [$19],y
                    .ld     $03         
                    .ld     $80,out
                    .ld     $c0,out
                    .ld     [$04]       
                    .adda   [$05]
                    .adda   $5a
                    .bne    cold
                    .ld     $00
warm                .ld     [$04]
                    .adda   $01
cold                .st     [$04]
                    .xora   $ff
                    .suba   $59
                    .st     [$05]
                    .ld     $ee         
                    .st     [$16]
                    .adda   $02,x
                    .ld     $01
                    .st     [$17],y
                    .st     $59,[y,x++]
                    .st     $9a,[y,x++]
                    .st     $2b,[y,x++]
                    .st     $22,[y,x++]
                    .st     $b4,[y,x++]
                    .st     $fc,[y,x++]
                    .st     $b4,[y,x++]
                    .st     $e2,[y,x++]
                    .ld     $ff         
                    .st     [$0e]
                    .st     [$0f]
                    .st     [$10]
                    .st     [$11]
                    .st     [$12]
                    .ld     $07         
                    .ld     $80,out
                    .ld     $c0,out
                    .ld     $07,y       
                    .ld     $00
                    .st     [$02]
                    .ld     $00,x
loop0               .st     [$1d]       
                    .st     [y,x++]
                    .anda   $20         
                    .bne    initTri0
                    .ld     [$1d]
                    .bra    initTri1
initTri0            .adda   [$1d]
                    .xora   $7f
initTri1            .st     [y,x++]
                    .ld     [$1d]       
                    .anda   $20
                    .beq    initPul
                    .ld     $00
                    .ld     $3f
initPul             .st     [y,x++]
                    .ld     [$1d]       
                    .st     [y,x++]
                    .adda   $01
                    .xora   $40
                    .bne    loop0
                    .xora   $40
                    .ld     $00         
                    .st     [$18]       
                    .st     [$19]       
loop1               .ld     [$19],x     
                    .ld     [y,x]
                    .st     [$1d]
                    .ld     [$18]       
                    .adda   ac
                    .adda   ac,x
                    .ld     [y,x]
                    .ld     [$19],x
                    .st     [y,x]
                    .adda   ac          
                    .adda   ac
                    .adda   [$19]
                    .st     [$19]
                    .ld     [$18]       
                    .adda   ac
                    .adda   ac,x
                    .ld     [$1d]
                    .st     [y,x]
                    .ld     [$18]       
                    .adda   $01
                    .bne    loop1
                    .st     [$18]
                    .ld     $78         
                    .st     [$2d]
                    .ld     $0a
                    .st     [$2f]
                    .ld     $00
                    .st     [$2e]
                    .ld     $0f         
                    .ld     $80,out
                    .ld     $c0,out
                    .st     [$13]
                    .st     [$14]
                    .ld     vBlankStart/256,y       
                    .jmp    y,vBlankStart
                    .ld     $c0
                    .nop    
                    .nop    
SYS_Reset_36        .ld     $1c         
                    .st     [$21]
                    .ld     $00
                    .st     [$1c]
                    .st     [$1a]
                    .st     [$2c]
                    .ld     $02
                    .st     [$1b]
                    .ld     videoF
                    .st     [$0d]
                    .ld     $ad
                    .st     [$22]
                    .ld     $42
                    .st     [$24]
                    .ld     $fe
                    .st     [$25]
                    .ld     REENTER/256,y
                    .jmp    y,REENTER
                    .ld     $ee
SYS_Exec_88         .ld     $00
                    .st     [$17],y
                    .ld     [$1c]
                    .suba   $37
                    .st     [$1d],x
                    .adda   $fe
                    .st     [$16]
                    .st     $75,[y,x++]
                    .st     $90,[y,x++]
                    .adda   $1a
                    .st     [y,x++]
                    .st     $5e,[y,x++]
                    .st     $27,[y,x++]
                    .st     $cf,[y,x++]
                    .adda   $09
                    .st     [y,x++]
                    .st     $5e,[y,x++]
                    .st     $26,[y,x++]
                    .st     $cf,[y,x++]
                    .st     [y,x++]
                    .st     $5e,[y,x++]
                    .st     $28,[y,x++]
                    .st     $cf,[y,x++]
                    .st     [y,x++]
                    .st     $f0,[y,x++]
                    .st     $26,[y,x++]
                    .st     $93,[y,x++]
                    .st     $26,[y,x++]
                    .st     $1a,[y,x++]
                    .st     $28,[y,x++]
                    .st     $e6,[y,x++]
                    .st     $01,[y,x++]
                    .st     $35,[y,x++]
                    .st     $72,[y,x++]
                    .adda   $e8
                    .st     [y,x++]
                    .st     $cf,[y,x++]
                    .adda   $18
                    .st     [y,x++]
                    .st     $35,[y,x++]
                    .st     $72,[y,x++]
                    .adda   $e0
                    .st     [y,x++]
                    .st     $63,[y,x++]
                    .st     $ff,[y,x++]
                    .adda   $22
                    .st     [y,x++]
                    .st     $00,[y,x++]
                    .st     $1a,[y,x++]
                    .st     $24,[y,x++]
                    .st     $8c,[y,x++]
                    .st     $fb,[y,x++]
                    .st     $35,[y,x++]
                    .st     $72,[y,x++]
                    .adda   $09
                    .st     [y,x++]
                    .st     $5e,[y,x++]
                    .st     $24,[y,x++]
                    .st     $93,[y,x++]
                    .st     $25,[y,x++]
                    .st     $21,[y,x++]
                    .st     $24,[y,x++]
                    .st     $7f,[y,x++]
                    .st     $00,[y,x++]
                    .st     $93,[y,x++]
                    .st     $24,[y,x++]
                    .st     $ff,[y,x++]
                    .nop    
                    .ld     REENTER/256,y
                    .jmp    y,REENTER
                    .ld     $d4
SYS_Out_22          .ld     [$24],out
                    .nop    
                    .ld     REENTER/256,y
                    .jmp    y,REENTER
                    .ld     $f5
SYS_In_24           .st     in,[$18]
                    .ld     $00
                    .st     [$19]
                    .nop    
                    .ld     REENTER/256,y
                    .jmp    y,REENTER
                    .ld     $f4
videoA              .ld     videoB
                    .st     [$0c]
                    .ld     $01,y
                    .ld     [$09],x
                    .ld     [y,x]
                    .st     [y,x++]
                    .st     [$0b]
                    .ld     [y,x]
                    .adda   [$0a],x
                    .ld     [$0b],y
                    .ld     $c0
pixels              .ora    [y,x++],out 
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ora    [y,x++],out
                    .ld     $c0,out     
                    .ld     [$02]       
soundF              .anda   $03
                    .adda   $01
                    .ld     $80,out     
sound2              .st     [$02],y
                    .ld     $7f
                    .anda   [y,$fe]
                    .adda   [y,$fc]
                    .st     [y,$fe]
                    .anda   $80,x
                    .ld     [x]
                    .adda   [y,$ff]
                    .adda   [y,$fd]
                    .st     [y,$ff]
                    .anda   $fc
                    .xora   [y,$fb]
                    .ld     ac,x
                    .ld     [y,$fa]
                    .ld     $07,y
                    .adda   [y,x]
                    .blt    sound2a
                    .bra    sound2b
                    .ld     $01,y       ;.anda   $3f
sound2a             .ld     $3f
sound2b             .adda   [$03]
                    .st     [$03]
                    .ld     [$13]       
                    .bra    [$0c]
                    .ld     $c0,out

;videoB              .ld     videoC
;                    .st     [$0c]
;                    .ld     $01,y
;                    .ld     [$09]
;                    .adda   $01,x
;                    .ld     [$0a]
;                    .adda   [y,x]
;                    .st     [$0a],x
;                    .ld     [$0b],y
;                    .bra    pixels
;                    .ld     $c0

videoB              .ld     [$09]
                    .adda   $01,x
                    .ld     [$0a]
                    .adda   [y,x]
                    .st     [$0a]
                    .ld     videoC
                    .bra    join + 2
                    .st     [$0c]
                    .nop    
                    .nop
                    .nop

videoC              .ld     [$03]       
                    .ora    $0f
                    .anda   [$14]
                    .st     [$13]
                    .st     $03,[$03]   
                    .ld     [$0d]       
                    .st     [$0c]
                    .ld     [$0a],x
                    .ld     [$0b],y
                    .bra    pixels
                    .ld     $c0

;videoC              .ld     [$03]       
;                    .ora    $0f
;                    .anda   [$14]
;                    .st     [$13]
;                    .st     $03,[$03]
;                    .ld     [$0d]
;                    .bra    join + 2
;                    .st     [$0c]
;                    .nop    
;                    .nop    
;                    .nop    

videoD              .ld     [$0a],x
                    .ld     [$09]
                    .suba   $ee
                    .beq    last
                    .ld     [$0b],y
                    .adda   $f0
                    .st     [$09]
                    .ld     videoA
                    .st     [$0c]
                    .bra    pixels
                    .ld     $c0
last                .nop    
                    .nop    
                    .ld     videoE
                    .st     [$0c]
                    .bra    pixels
                    .ld     $c0
videoE              .ld     vBlankStart/256,y
                    .jmp    y,vBlankStart
                    .ld     $c0
videoF              .ld     [$09]
                    .suba   $ee
                    .bne    notlast
                    .adda   videoE
                    .bra    join
                    .ld     $f0
notlast             .st     [$09]
                    .ld     videoA
join                .st     [$0c]
                    .nop                
                    .ld     $02
                    .st     [$1e]
                    .ld     ENTER/256,y
                    .jmp    y,ENTER
                    .ld     $3c
                    .ld     soundF/256,y
                    .jmp    y,soundF
                    .ld     [$02]
vBlankStart         .st     [$0a]       
                    .ld     $80
                    .st     [$0b]
                    .st     $00,[$00]   
                    .ld     $01
                    .st     [$80]
                    .ld     $b3
                    .st     [$09]
                    .ld     [$0e]       
                    .adda   $01
                    .st     [$0e]
                    .xora   [$07]       
                    .xora   [$0f]
                    .adda   [$06]
                    .st     [$06]
                    .adda   [$08]
                    .st     [$08]
                    .blt    rnd0
                    .bra    rnd1
                    .xora   $53
rnd0                .xora   $6c
rnd1                .adda   [$07]
                    .st     [$07]
                    .ld     [$2d]       
                    .bne    leds4
                    .ld     $22
                    .adda   [$2e]
                    .bra    ac
                    .bra    leds1
leds0               .ld     $0f         
                    .ld     $07         
                    .ld     $03         
                    .ld     $01         
                    .ld     $02         
                    .ld     $04         
                    .ld     $08         
                    .ld     $04         
                    .ld     $02         
                    .ld     $01         
                    .ld     $03         
                    .ld     $07         
                    .ld     $0f         
                    .ld     $0e         
                    .ld     $0c         
                    .ld     $08         
                    .ld     $04         
                    .ld     $02         
                    .ld     $01         
                    .ld     $02         
                    .ld     $04         
                    .ld     $08         
                    .ld     $0c         
                    .ld     $8e         
leds1               .st     [$14]
                    .blt    leds2
                    .bra    leds3
                    .ld     [$2e]
leds2               .ld     $ff
leds3               .adda   $01
                    .st     [$2e]
                    .bra    leds5
                    .ld     [$2f]
leds4               .ld     $03         
                    .bne    leds4+1
                    .suba   $01
                    .nop    
                    .ld     [$2d]
                    .suba   $01
leds5               .st     [$2d]
                    .ld     [$14]
                    .anda   $0f
                    .st     [$14]
                    .st     $03,[$03]   
                    .nop                
                    .ld     $54
                    .st     [$1e]
                    .ld     ENTER/256,y
                    .jmp    y,ENTER
                    .ld     $24
                    .ld     [$2c]       
                    .bne    snd0
                    .bra    snd1
                    .ld     $00
snd0                .ld     $f0
snd1                .ora    [$14]
                    .st     [$14]
                    .ld     [$2c]       
                    .beq    snd2
                    .bra    snd3
                    .suba   $01
snd2                .ld     $00
snd3                .st     [$2c]
                    .ld     [$0a],out   
sound1              .ld     [$02]       
                    .anda   $03
                    .adda   $01
                    .ld     [$0b],out   
                    .st     [$02],y
                    .ld     $7f         
                    .anda   [y,$fe]
                    .adda   [y,$fc]
                    .st     [y,$fe]
                    .anda   $80,x
                    .ld     [x]
                    .adda   [y,$ff]
                    .adda   [y,$fd]
                    .st     [y,$ff]
                    .anda   $fc
                    .xora   [y,$fb]
                    .ld     ac,x
                    .ld     [y,$fa]
                    .ld     $07,y
                    .adda   [y,x]
                    .blt    sound1a
                    .bra    sound1b
                    .anda   $3f
sound1a             .ld     $3f
sound1b             .adda   [$03]
                    .st     [$03]
                    .ld     [$13]       
                    .nop    
                    .ld     [$0a],out   
                    .ld     [$09]
                    .bge    vBlankLast
                    .adda   $02
                    .st     [$09]
                    .suba   $cd
                    .bne    vSync0
                    .adda   $10
                    .ld     $c0
                    .bra    vSync2
                    .st     [$0a]
vSync0              .bne    vSync1
                    .ld     $40
                    .bra    vSync3
                    .st     [$0a]
vSync1              .ld     [$0a]
vSync2              .nop    
vSync3              .xora   $40
                    .st     [$0b]
                    .ld     [$09]       
                    .xora   $cf
                    .bne    ser0
                    .bra    ser1
                    .st     in,[$0f]
ser0                .nop    
ser1                .ld     [$09]
                    .anda   $06
                    .bne    vBlankNormal
                    .ld     [$03]
vBlankSample        .ora    $0f         
                    .anda   [$14]
                    .st     [$13]
                    .st     $03,[$03]   
                    .ld     $a4         
                    .st     [$1e]
                    .ld     ENTER/256,y
                    .jmp    y,ENTER
                    .ld     $33
                    .bra    sound1
                    .ld     [$0a],out   
vBlankNormal        .ld     $ab         
                    .st     [$1e]
                    .ld     ENTER/256,y
                    .jmp    y,ENTER
                    .ld     $35
                    .bra    sound1
                    .ld     [$0a],out   
vBlankLast          .ld     $ff         
                    .xora   [$10]
                    .ora    [$0f]
                    .anda   [$11]
                    .ora    [$0f]
                    .st     [$11]
                    .ld     [$0f]
                    .st     [$10]
                    .xora   $ef         
                    .bne    restart0
                    .ld     [$12]
                    .suba   $01
                    .st     [$12]
                    .anda   $7f
                    .beq    restart2
                    .ld     $ee
                    .bra    restart1
                    .bra    restart3
restart0            .ld     $7f
                    .st     [$12]
                    .nop    
                    .nop    
                    .nop    
                    .nop    
                    .bra    restart3
restart1            .nop    
restart2            .st     [$16]
                    .ld     $01
                    .st     [$17]
restart3            .ld     [$11]
                    .xora   $df
                    .beq    select0
                    .bra    select1
                    .ld     $00
select0             .ld     $2c
select1             .xora   [$0d]
                    .st     [$0d]
                    .ld     [$11]
                    .ora    $20
                    .st     [$11]
                    .nop                
                    .ld     $db
                    .st     [$1e]
                    .ld     ENTER/256,y
                    .jmp    y,ENTER
                    .ld     $2e
                    .st     [$09]
                    .st     [$0a]
                    .st     [$0c]
                    .ld     [$02]
                    .anda   $03         
                    .adda   $01
                    .ld     sound2/256,y
                    .jmp    y,sound2
                    .ld     $80,out
                    .nop    
                    .nop    
                    .nop    
                    .nop    
                    .nop    
SYS_NextByteIn_32   .ld     [$09]
                    .xora   [$27]
                    .bne    sysNbi
                    .ld     [$24],x
                    .ld     [$25],y
                    .ld     in
                    .st     [y,x]
                    .adda   [$26]
                    .st     [$26]
                    .ld     [$24]
                    .adda   $01
                    .st     [$24]
                    .ld     REENTER/256,y
                    .jmp    y,REENTER
                    .ld     $f0
sysNbi              .ld     [$16]
                    .suba   $02
                    .st     [$16]
                    .ld     $f2
                    .ld     REENTER/256,y
                    .jmp    y,REENTER
                    .nop    
ENTER               .bra    next2      
                    .ld     [$17],y
NEXT                .adda   [$15]       
                    .blt    EXIT        
next2               .st     [$15]
                    .ld     [$16]       
                    .adda   $02
                    .st     [$16],x
                    .ld     [y,x]       
                    .st     [y,x++]
                    .bra    ac          
                    .ld     [y,x]       
EXIT                .adda   $0e
                    .bgt    EXIT + 1       
                    .suba   $01
                    .ld     $02,y
                    .jmp    y,[$1e]     
                    .ld     $00
LDWI                .st     [$18]
                    .st     [y,x++]
                    .ld     [y,x]
                    .st     [$19]
                    .ld     [$16]
                    .adda   $01
                    .st     [$16]
                    .ld     $f6
                    .bra    NEXT
LD                  .ld     ac,x
                    .ld     [x]
                    .st     [$18]
                    .ld     $00
                    .st     [$19]
                    .ld     $f7
                    .bra    NEXT
LDW                 .ld     ac,x
                    .adda   $01
                    .st     [$1d]
                    .ld     [x]
                    .st     [$18]
                    .ld     [$1d],x
                    .ld     [x]
                    .st     [$19]
                    .bra    NEXT
                    .ld     $f6
STW                 .ld     ac,x
                    .adda   $01
                    .st     [$1d]
                    .ld     [$18]
                    .st     [x]
                    .ld     [$1d],x
                    .ld     [$19]
                    .st     [x]
                    .bra    NEXT
                    .ld     $f6
BCC                 .ld     [$19]
                    .bne    cond2
                    .st     [$1d]
                    .ld     [$18]
                    .beq    cond3
                    .ld     $01
                    .st     [$1d]
                    .ld     [y,x]
cond1               .bra    ac
                    .ld     [$1d]
EQ                  .bne    cond4
cond2               .beq    cond5      
                    .ld     [y,x]
                    .nop    
cond3               .bra    cond1
                    .ld     [y,x]
cond4               .ld     [$16]       
                    .bra    cond6
                    .adda   $01
cond5               .st     [y,x++]     
                    .ld     [y,x]
cond6               .st     [$16]
                    .bra    NEXT
                    .ld     $f2
GT                  .ble    cond4
                    .bgt    cond5
                    .ld     [y,x]
LT                  .bge    cond4
                    .blt    cond5
                    .ld     [y,x]
GE                  .blt    cond4
                    .bge    cond5
                    .ld     [y,x]
LE                  .bgt    cond4
                    .ble    cond5
                    .ld     [y,x]
LDI                 .st     [$18]
                    .ld     $00
                    .st     [$19]
                    .ld     $f8
                    .bra    NEXT
ST                  .ld     ac,x
                    .ld     [$18]
                    .st     [x]
                    .ld     $f8
                    .bra    NEXT
POP                 .ld     [$1c],x
                    .ld     [x]
                    .st     [$1a]
                    .ld     [$1c]
                    .adda   $01,x
                    .ld     [x]
                    .st     [$1b]
                    .ld     [$1c]
                    .adda   $02
                    .st     [$1c]
next1               .ld     [$16]
                    .suba   $01
                    .st     [$16]
                    .ld     $f3
                    .bra    NEXT
NE                  .beq    cond4
                    .bne    cond5
                    .ld     [y,x]
PUSH                .ld     [$1c]
                    .suba   $01,x
                    .ld     [$1b]
                    .st     [x]
                    .ld     [$1c]
                    .suba   $02
                    .st     [$1c],x
                    .ld     [$1a]
                    .bra    next1
                    .st     [x]
LUP                 .ld     [$19],y
                    .jmp    y,$fb       
                    .adda   [$18]
ANDI                .anda   [$18]
                    .st     [$18]
                    .ld     $00
                    .st     [$19]
                    .bra    NEXT
                    .ld     $f8
ORI                 .ora    [$18]
                    .st     [$18]
                    .bra    NEXT
                    .ld     $f9
XORI                .xora   [$18]
                    .st     [$18]
                    .bra    NEXT
                    .ld     $f9
BRA                 .st     [$16]
                    .ld     $f9
                    .bra    NEXT
INC                 .ld     ac,x
                    .ld     [x]
                    .adda   $01
                    .st     [x]
                    .bra    NEXT
                    .ld     $f8
ADDW                .ld     ac,x
                    .adda   $01
                    .st     [$1d]
                    .ld     [$18]
                    .adda   [x]
                    .st     [$18]
                    .blt    addw0
                    .suba   [x]
                    .bra    addw1
                    .ora    [x]
addw0               .anda   [x]
                    .nop    
addw1               .anda   $80,x
                    .ld     [x]
                    .adda   [$19]
                    .ld     [$1d],x
                    .adda   [x]
                    .st     [$19]
                    .bra    NEXT
                    .ld     $f2
PEEK                .ld     peek/256,y
                    .jmp    y,peek
retry               .ld     [$16]       
                    .suba   $02
                    .st     [$16]
                    .bra    REENTER
                    .ld     $f6
SYS                 .adda   [$15]
                    .blt    retry
                    .ld     [$23],y
                    .jmp    y,[$22]
SUBW                .ld     ac,x
                    .adda   $01
                    .st     [$1d]
                    .ld     [$18]
                    .blt    subw0
                    .suba   [x]
                    .st     [$18]
                    .bra    subw1
                    .ora    [x]
subw0               .st     [$18]
                    .anda   [x]
                    .nop    
subw1               .anda   $80,x
                    .ld     [$19]
                    .suba   [x]
                    .ld     [$1d],x
                    .suba   [x]
                    .st     [$19]
                    .ld     $f2
REENTER             .bra    NEXT        
                    .ld     [$17],y
DEF                 .ld     def/256,y
                    .jmp    y,def
CALL                .st     [$1d]
                    .ld     [$16]
                    .adda   $02         
                    .st     [$1a]
                    .ld     [$17]
                    .st     [$1b]
                    .ld     [$1d],x
                    .ld     [x]
                    .suba   $02         
                    .st     [$16]
                    .ld     [$1d]
                    .adda   $01,x
                    .ld     [x]
                    .st     [$17],y
                    .bra    NEXT
                    .ld     $f3
ALLOC               .adda   [$1c]
                    .st     [$1c]
                    .bra    NEXT
                    .ld     $f9
ADDI                .ld     addi/256,y
                    .jmp    y,addi
                    .st     [$1d]
SUBI                .ld     subi/256,y
                    .jmp    y,subi
                    .st     [$1d]
LSLW                .ld     lslw/256,y
                    .jmp    y,lslw
                    .ld     [$18]
STLW                .ld     stlw/256,y
                    .jmp    y,stlw
LDLW                .ld     ldlw/256,y
                    .jmp    y,ldlw
POKE                .ld     poke/256,y
                    .jmp    y,poke
                    .st     [$1d]
DOKE                .ld     doke/256,y
                    .jmp    y,doke
                    .st     [$1d]
DEEK                .ld     deek/256,y
                    .jmp    y,deek
ANDW                .ld     andw/256,y
                    .jmp    y,andw
ORW                 .ld     orw/256,y
                    .jmp    y,orw
XORW                .ld     xorw/256,y
                    .jmp    y,xorw
                    .st     [$1d]
RET                 .ld     [$1a]
                    .suba   $02
                    .st     [$16]
                    .ld     [$1b]
                    .st     [$17]
                    .ld     REENTER/256,y
                    .jmp    y,REENTER
                    .ld     $f6
def                 .ld     [$16]
                    .adda   $02
                    .st     [$18]
                    .ld     [$17]
                    .st     [$19]
                    .ld     [$1d]
                    .st     [$16]
                    .ld     REENTER/256,y
                    .ld     $f3
                    .jmp    y,REENTER
                    .nop    
addi                .adda   [$18]
                    .st     [$18]
                    .blt    addi0
                    .suba   [$1d]
                    .bra    addi1
                    .ora    [$1d]
addi0               .anda   [$1d]
                    .nop    
addi1               .anda   $80,x
                    .ld     [x]
                    .adda   [$19]
                    .st     [$19]
                    .ld     REENTER/256,y
                    .jmp    y,REENTER
                    .ld     $f2
subi                .ld     [$18]
                    .blt    subi0
                    .suba   [$1d]
                    .st     [$18]
                    .bra    subi1
                    .ora    [$1d]
subi0               .st     [$18]
                    .anda   [$1d]
                    .nop    
subi1               .anda   $80,x
                    .ld     [$19]
                    .suba   [x]
                    .st     [$19]
                    .ld     REENTER/256,y
                    .jmp    y,REENTER
                    .ld     $f2
lslw                .anda   $80,x
                    .adda   [$18]
                    .st     [$18]
                    .ld     [x]
                    .adda   [$19]
                    .adda   [$19]
                    .st     [$19]
                    .ld     [$16]
                    .suba   $01
                    .st     [$16]
                    .ld     REENTER/256,y
                    .jmp    y,REENTER
                    .ld     $f2
stlw                .adda   [$1c]
                    .st     [$1d]
                    .adda   $01,x
                    .ld     [$19]
                    .st     [x]
                    .ld     [$1d],x
                    .ld     [$18]
                    .st     [x]
                    .ld     REENTER/256,y
                    .jmp    y,REENTER
                    .ld     $f3
ldlw                .adda   [$1c]
                    .st     [$1d]
                    .adda   $01,x
                    .ld     [x]
                    .st     [$19]
                    .ld     [$1d],x
                    .ld     [x]
                    .st     [$18]
                    .ld     REENTER/256,y
                    .jmp    y,REENTER
                    .ld     $f3
poke                .adda   $01,x
                    .ld     [x]
                    .ld     ac,y
                    .ld     [$1d],x
                    .ld     [x]
                    .ld     ac,x
                    .ld     [$18]
                    .st     [y,x]
                    .ld     REENTER/256,y
                    .jmp    y,REENTER
                    .ld     $f3
peek                .suba   $01
                    .st     [$16]
                    .ld     [$18],x
                    .ld     [$19],y
                    .ld     [y,x]
                    .st     [$18]
lupReturn           .ld     $00
                    .st     [$19]
                    .ld     REENTER/256,y
                    .jmp    y,REENTER
                    .ld     $f3
doke                .adda   $01,x
                    .ld     [x]
                    .ld     ac,y
                    .ld     [$1d],x
                    .ld     [x]
                    .ld     ac,x
                    .ld     [$18]
                    .st     [y,x++]
                    .ld     [$19]
                    .st     [y,x]
                    .ld     REENTER/256,y
                    .jmp    y,REENTER
                    .ld     $f2
deek                .ld     [$16]
                    .suba   $01
                    .st     [$16]
                    .ld     [$18],x
                    .ld     [$19],y
                    .ld     [y,x]
                    .st     [y,x++]
                    .st     [$18]
                    .ld     [y,x]
                    .st     [$19]
                    .ld     REENTER/256,y
                    .jmp    y,REENTER
                    .ld     $f2
andw                .st     [$1d]
                    .adda   $01,x
                    .ld     [x]
                    .anda   [$19]
                    .st     [$19]
                    .ld     [$1d],x
                    .ld     [x]
                    .anda   [$18]
                    .st     [$18]
                    .ld     $f2
                    .ld     REENTER/256,y
                    .jmp    y,REENTER
orw                 .st     [$1d]
                    .adda   $01,x
                    .ld     [x]
                    .ora    [$19]
                    .st     [$19]
                    .ld     [$1d],x
                    .ld     [x]
                    .ora    [$18]
                    .st     [$18]
                    .ld     $f2
                    .ld     REENTER/256,y
                    .jmp    y,REENTER
xorw                .adda   $01,x
                    .ld     [x]
                    .xora   [$19]
                    .st     [$19]
                    .ld     [$1d],x
                    .ld     [x]
                    .xora   [$18]
                    .st     [$18]
                    .ld     REENTER/256,y
                    .jmp    y,REENTER
                    .ld     $f3
SYS_Random_34       .ld     [$0e]
                    .xora   [$07]
                    .xora   [$0f]
                    .adda   [$06]
                    .st     [$06]
                    .st     [$18]
                    .adda   [$08]
                    .st     [$08]
                    .blt    sysRnd0
                    .bra    sysRnd1
                    .xora   $53
sysRnd0             .xora   $6c
sysRnd1             .adda   [$07]
                    .st     [$07]
                    .st     [$19]
                    .ld     REENTER/256,y
                    .jmp    y,REENTER
                    .ld     $ef
SYS_LSRW7_30        .ld     [$18]
                    .anda   $80,x
                    .ld     [$19]
                    .adda   ac
                    .ora    [x]
                    .st     [$18]
                    .ld     [$19]
                    .anda   $80,x
                    .ld     [x]
                    .st     [$19]
                    .ld     REENTER/256,y
                    .jmp    y,REENTER
                    .ld     $f1
SYS_LSRW8_24        .ld     [$19]
                    .st     [$18]
                    .ld     $00
                    .st     [$19]
                    .ld     REENTER/256,y
                    .jmp    y,REENTER
                    .ld     $f4
SYS_LSLW8_24        .ld     [$18]
                    .st     [$19]
                    .ld     $00
                    .st     [$18]
                    .ld     REENTER/256,y
                    .jmp    y,REENTER
                    .ld     $f4
SYS_Draw4_30        .ld     [$28],x
                    .ld     [$29],y
                    .ld     [$24]
                    .st     [y,x++]
                    .ld     [$25]
                    .st     [y,x++]
                    .ld     [$26]
                    .st     [y,x++]
                    .ld     [$27]
                    .st     [y,x++]
                    .ld     REENTER/256,y
                    .jmp    y,REENTER
                    .ld     $f1
SYS_VDrawBits_134   .ld     [$28],x
                    .ld     $00
vdb0                .st     [$1d]
                    .adda   [$29],y
                    .ld     [$26]
                    .blt    vdb1
                    .bra    vdb2
                    .ld     [$24]
vdb1                .ld     [$25]
vdb2                .st     [y,x]
                    .ld     [$26]
                    .adda   ac
                    .st     [$26]
                    .ld     [$1d]
                    .suba   $07
                    .bne    vdb0
                    .adda   $08
                    .ld     REENTER/256,y
                    .jmp    y,REENTER
                    .ld     $bd
                    .nop
                    .nop
                    .nop
